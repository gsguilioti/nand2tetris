// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    Mux16(a= x, b= false, sel= zx, out= ox1);
    Mux16(a= y, b= false, sel= zy, out= oy1);

    Not16(in= ox1, out= nox1);
    Not16(in= oy1, out= noy1);

    Mux16(a= ox1, b= nox1, sel= nx, out= ox2);
    Mux16(a= oy1, b= noy1, sel= ny, out= oy2);

    Add16(a = ox2, b = oy2, out = oadd);
    And16(a= ox2, b= oy2, out= oand);

    Mux16(a= oand, b= oadd, sel= f, out= ofunc);
    Not16(in= ofunc, out= nofunc);

    Mux16(a= ofunc, b= nofunc, sel= no, out= out, out= of, out[0..7]= of1, out[8..15]= of2, out[15]= ng);
    Or8Way(in= of1, out= zr1); 
    Or8Way(in= of2, out= zr2); 
    Or(a= zr1, b= zr2, out= zr3);
    Not(in= zr3, out= zr);
}